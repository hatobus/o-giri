// Package database contains the types for schema 'ogiri'.
package database

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// Odai represents a row from 'ogiri.odai'.
type Odai struct {
	ID           int            `json:"id"`            // id
	QuestionerID int            `json:"questioner_id"` // questioner_id
	Odai         string         `json:"odai"`          // odai
	NextOgiriID  string         `json:"next_ogiri_id"` // next_ogiri_id
	PublishedAt  mysql.NullTime `json:"published_at"`  // published_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Odai exists in the database.
func (o *Odai) Exists() bool {
	return o._exists
}

// Deleted provides information if the Odai has been deleted from the database.
func (o *Odai) Deleted() bool {
	return o._deleted
}

// Insert inserts the Odai to the database.
func (o *Odai) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if o._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ogiri.odai (` +
		`questioner_id, odai, next_ogiri_id, published_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, o.QuestionerID, o.Odai, o.NextOgiriID, o.PublishedAt)
	res, err := db.Exec(sqlstr, o.QuestionerID, o.Odai, o.NextOgiriID, o.PublishedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	o.ID = int(id)
	o._exists = true

	return nil
}

// Update updates the Odai in the database.
func (o *Odai) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if o._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ogiri.odai SET ` +
		`questioner_id = ?, odai = ?, next_ogiri_id = ?, published_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, o.QuestionerID, o.Odai, o.NextOgiriID, o.PublishedAt, o.ID)
	_, err = db.Exec(sqlstr, o.QuestionerID, o.Odai, o.NextOgiriID, o.PublishedAt, o.ID)
	return err
}

// Save saves the Odai to the database.
func (o *Odai) Save(db XODB) error {
	if o.Exists() {
		return o.Update(db)
	}

	return o.Insert(db)
}

// Delete deletes the Odai from the database.
func (o *Odai) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return nil
	}

	// if deleted, bail
	if o._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ogiri.odai WHERE id = ?`

	// run query
	XOLog(sqlstr, o.ID)
	_, err = db.Exec(sqlstr, o.ID)
	if err != nil {
		return err
	}

	// set deleted
	o._deleted = true

	return nil
}

// User returns the User associated with the Odai's QuestionerID (questioner_id).
//
// Generated from foreign key 'odai_ibfk_1'.
func (o *Odai) User(db XODB) (*User, error) {
	return UserByID(db, o.QuestionerID)
}

// OdaisByQuestionerID retrieves a row from 'ogiri.odai' as a Odai.
//
// Generated from index 'fkquestioner_id'.
func OdaisByQuestionerID(db XODB, questionerID int) ([]*Odai, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, questioner_id, odai, next_ogiri_id, published_at ` +
		`FROM ogiri.odai ` +
		`WHERE questioner_id = ?`

	// run query
	XOLog(sqlstr, questionerID)
	q, err := db.Query(sqlstr, questionerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Odai{}
	for q.Next() {
		o := Odai{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.ID, &o.QuestionerID, &o.Odai, &o.NextOgiriID, &o.PublishedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OdaiByNextOgiriID retrieves a row from 'ogiri.odai' as a Odai.
//
// Generated from index 'next_ogiri_id'.
func OdaiByNextOgiriID(db XODB, nextOgiriID string) (*Odai, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, questioner_id, odai, next_ogiri_id, published_at ` +
		`FROM ogiri.odai ` +
		`WHERE next_ogiri_id = ?`

	// run query
	XOLog(sqlstr, nextOgiriID)
	o := Odai{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, nextOgiriID).Scan(&o.ID, &o.QuestionerID, &o.Odai, &o.NextOgiriID, &o.PublishedAt)
	if err != nil {
		return nil, err
	}

	return &o, nil
}

// OdaiByID retrieves a row from 'ogiri.odai' as a Odai.
//
// Generated from index 'odai_id_pkey'.
func OdaiByID(db XODB, id int) (*Odai, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, questioner_id, odai, next_ogiri_id, published_at ` +
		`FROM ogiri.odai ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	o := Odai{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&o.ID, &o.QuestionerID, &o.Odai, &o.NextOgiriID, &o.PublishedAt)
	if err != nil {
		return nil, err
	}

	return &o, nil
}
