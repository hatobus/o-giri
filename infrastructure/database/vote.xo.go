// Package database contains the types for schema 'ogiri'.
package database

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Vote represents a row from 'ogiri.vote'.
type Vote struct {
	ID         int    `json:"id"`          // id
	OgiriID    string `json:"ogiri_id"`    // ogiri_id
	BokeID     int    `json:"boke_id"`     // boke_id
	AnswererID int    `json:"answerer_id"` // answerer_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Vote exists in the database.
func (v *Vote) Exists() bool {
	return v._exists
}

// Deleted provides information if the Vote has been deleted from the database.
func (v *Vote) Deleted() bool {
	return v._deleted
}

// Insert inserts the Vote to the database.
func (v *Vote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if v._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ogiri.vote (` +
		`ogiri_id, boke_id, answerer_id` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, v.OgiriID, v.BokeID, v.AnswererID)
	res, err := db.Exec(sqlstr, v.OgiriID, v.BokeID, v.AnswererID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	v.ID = int(id)
	v._exists = true

	return nil
}

// Update updates the Vote in the database.
func (v *Vote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !v._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if v._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ogiri.vote SET ` +
		`ogiri_id = ?, boke_id = ?, answerer_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, v.OgiriID, v.BokeID, v.AnswererID, v.ID)
	_, err = db.Exec(sqlstr, v.OgiriID, v.BokeID, v.AnswererID, v.ID)
	return err
}

// Save saves the Vote to the database.
func (v *Vote) Save(db XODB) error {
	if v.Exists() {
		return v.Update(db)
	}

	return v.Insert(db)
}

// Delete deletes the Vote from the database.
func (v *Vote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !v._exists {
		return nil
	}

	// if deleted, bail
	if v._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ogiri.vote WHERE id = ?`

	// run query
	XOLog(sqlstr, v.ID)
	_, err = db.Exec(sqlstr, v.ID)
	if err != nil {
		return err
	}

	// set deleted
	v._deleted = true

	return nil
}

// Ogiri returns the Ogiri associated with the Vote's OgiriID (ogiri_id).
//
// Generated from foreign key 'vote_ibfk_1'.
func (v *Vote) Ogiri(db XODB) (*Ogiri, error) {
	return OgiriByOgiriID(db, v.OgiriID)
}

// Boke returns the Boke associated with the Vote's BokeID (boke_id).
//
// Generated from foreign key 'vote_ibfk_2'.
func (v *Vote) Boke(db XODB) (*Boke, error) {
	return BokeByBokeID(db, v.BokeID)
}

// User returns the User associated with the Vote's AnswererID (answerer_id).
//
// Generated from foreign key 'vote_ibfk_3'.
func (v *Vote) User(db XODB) (*User, error) {
	return UserByID(db, v.AnswererID)
}

// VotesByAnswererID retrieves a row from 'ogiri.vote' as a Vote.
//
// Generated from index 'fk_answerer_id'.
func VotesByAnswererID(db XODB, answererID int) ([]*Vote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ogiri_id, boke_id, answerer_id ` +
		`FROM ogiri.vote ` +
		`WHERE answerer_id = ?`

	// run query
	XOLog(sqlstr, answererID)
	q, err := db.Query(sqlstr, answererID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Vote{}
	for q.Next() {
		v := Vote{
			_exists: true,
		}

		// scan
		err = q.Scan(&v.ID, &v.OgiriID, &v.BokeID, &v.AnswererID)
		if err != nil {
			return nil, err
		}

		res = append(res, &v)
	}

	return res, nil
}

// VotesByBokeID retrieves a row from 'ogiri.vote' as a Vote.
//
// Generated from index 'fk_boke_id'.
func VotesByBokeID(db XODB, bokeID int) ([]*Vote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ogiri_id, boke_id, answerer_id ` +
		`FROM ogiri.vote ` +
		`WHERE boke_id = ?`

	// run query
	XOLog(sqlstr, bokeID)
	q, err := db.Query(sqlstr, bokeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Vote{}
	for q.Next() {
		v := Vote{
			_exists: true,
		}

		// scan
		err = q.Scan(&v.ID, &v.OgiriID, &v.BokeID, &v.AnswererID)
		if err != nil {
			return nil, err
		}

		res = append(res, &v)
	}

	return res, nil
}

// VotesByOgiriID retrieves a row from 'ogiri.vote' as a Vote.
//
// Generated from index 'fk_ogiri_id'.
func VotesByOgiriID(db XODB, ogiriID string) ([]*Vote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ogiri_id, boke_id, answerer_id ` +
		`FROM ogiri.vote ` +
		`WHERE ogiri_id = ?`

	// run query
	XOLog(sqlstr, ogiriID)
	q, err := db.Query(sqlstr, ogiriID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Vote{}
	for q.Next() {
		v := Vote{
			_exists: true,
		}

		// scan
		err = q.Scan(&v.ID, &v.OgiriID, &v.BokeID, &v.AnswererID)
		if err != nil {
			return nil, err
		}

		res = append(res, &v)
	}

	return res, nil
}

// VoteByID retrieves a row from 'ogiri.vote' as a Vote.
//
// Generated from index 'vote_id_pkey'.
func VoteByID(db XODB, id int) (*Vote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ogiri_id, boke_id, answerer_id ` +
		`FROM ogiri.vote ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	v := Vote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&v.ID, &v.OgiriID, &v.BokeID, &v.AnswererID)
	if err != nil {
		return nil, err
	}

	return &v, nil
}
